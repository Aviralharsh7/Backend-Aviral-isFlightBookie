const {StatusCodes} = require('http-status-codes');
const AppError = require('../utils/errorFormatting/appError');

const {AirportRepository} = require('../repository');
const { response } = require('express');
const airportRepository = new AirportRepository();

async function getAllAirport (){
    try {
        const allAirport = await airportRepository.getAllAirport();
        return allAirport;

    } catch (error) {
        throw new AppError(
            "All Airports data cannot be retrieved",
            StatusCodes.INTERNAL_SERVER_ERROR
        );
    }
}

async function getAirport (id){
    try {
        const airport = await airportRepository.getAirport();
        return airport;
    } catch (error){
        if (error.statusCode == StatusCodes.NOT_FOUND){
            throw new AppError(
                "Airport ID not found in our database",
                StatusCodes.NOT_FOUND
            );
        }
        throw new AppError(
            "Aiport data cannnot be retrieved",
            StatusCodes.INTERNAL_SERVER_ERROR
        );
    }
}

async function destroyAirport(id){
    try {
        const response = await airportRepository.destroyAirport(id);
        return response;

    } catch (error){
        if (error.statusCode == StatusCodes.NOT_FOUND){
            throw new AppError(
                "Requested Airport is not found in our database",
                StatusCodes.NOT_FOUND
            );
        }
        throw new AppError(
            "Airport cannot be deleted",
            StatusCodes.INTERNAL_SERVER_ERROR
        );
    }
}

async function updateAirport (id, data){
    try {
        const airport = await airportRepository.updateAirport(id, data);
        return airport;

    } catch (error){
        if(error.statusCode == StatusCodes.NOT_FOUND){
            throw new AppError(
                "Requested Aiport not found in our database",
                StatusCodes.NOT_FOUND
            );
        } else if (
            error.name == "SequelizeValidationError" || 
            error.name == "SequelizeUniqueConstraintError"
            ){
            let explanation = [];
            error.errors.ForEach((err) =>{
                explanation.push(err.message);
            });
            throw new AppError(
                explanation,
                StatusCodes.BAD_REQUEST
            );
        } else if (
            error.name == "SequelizeForeignKeyConstraintError"
            ){
            let explanation = [];
            explanation.push(error.parent.sqlMessage);
            throw new AppError(
                explanation,
                StatusCodes.BAD_REQUEST
            );
        }
        throw new AppError(
            "Airport Data cannot be updated",
            StatusCodes.INTERNAL_SERVER_ERROR
        );
    }
}

async function createAirport(data){
    try {
        const airport = await airportRepository.create(data);
        return airport;

    } catch (error){
        if (
            error.name =="SequelizeValidationError" || 
            error.name == "SequelizeUniqueConstraintError"
        ){
            let explanation = [];
            error.errors.ForEach((err) =>{
                explanation.push(err.message);
            });
            throw new AppError(
                explanation,
                StatusCodes.BAD_REQUEST
            );
        } else if (
            error.name == "SequelizeForeignKeyConstraintError"
        ){
            let explanation = [];

            // parent property points to the original database error that caused the foreign key constraint violation
            // sql message property contains the actual error message generated by the database server.
            explanation.push(error.parent.sqlMessage);
            throw new AppError(
                explanation,
                StatusCodes.BAD_REQUEST
            );
        }
        throw new AppError(
            "New Airport cannot be created",
            StatusCodes.INTERNAL_SERVER_ERROR
        );
    }
}

module.exports = {
    getAllAirport,
    getAirport,
    destroyAirport, 
    updateAirport,
    createAirport
}